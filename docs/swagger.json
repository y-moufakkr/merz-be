{
  "openapi": "3.0.0",
  "paths": {
    "/auth/register": {
      "post": {
        "operationId": "AuthController_register",
        "summary": "Register a new user",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegisterDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User successfully registered"
          },
          "400": {
            "description": "Bad request"
          }
        },
        "tags": [
          "auth"
        ]
      }
    },
    "/auth/login": {
      "post": {
        "operationId": "AuthController_login",
        "summary": "Log in a user",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User successfully logged in"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "tags": [
          "auth"
        ]
      }
    },
    "/auth/logout": {
      "post": {
        "operationId": "AuthController_logout",
        "summary": "Log out a user",
        "parameters": [],
        "responses": {
          "200": {
            "description": "User successfully logged out"
          }
        },
        "tags": [
          "auth"
        ]
      }
    },
    "/auth/google": {
      "get": {
        "operationId": "AuthController_googleAuth",
        "summary": "Initiate Google authentication",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "auth"
        ]
      }
    },
    "/auth/google/callback": {
      "get": {
        "operationId": "AuthController_googleAuthCallback",
        "summary": "Google authentication callback",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "auth"
        ]
      }
    },
    "/auth/change-password": {
      "post": {
        "operationId": "AuthController_changePassword",
        "summary": "Change user password",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangePasswordDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Password successfully changed"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "tags": [
          "auth"
        ]
      }
    },
    "/auth/forgot-password": {
      "post": {
        "operationId": "AuthController_forgotPassword",
        "summary": "Request password reset email",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ForgotPasswordDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Password reset email sent"
          },
          "404": {
            "description": "User not found"
          }
        },
        "tags": [
          "auth"
        ]
      }
    },
    "/auth/reset-password": {
      "post": {
        "operationId": "AuthController_resetPassword",
        "summary": "Reset password using token",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ResetPasswordDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Password successfully reset"
          },
          "401": {
            "description": "Invalid or expired token"
          }
        },
        "tags": [
          "auth"
        ]
      }
    },
    "/users/profile": {
      "get": {
        "operationId": "UsersController_getProfile",
        "summary": "Get current user profile",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Returns the user profile"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "tags": [
          "users"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "put": {
        "operationId": "UsersController_updateProfile",
        "summary": "Update user profile",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateProfileDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Profile updated successfully"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "tags": [
          "users"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/users": {
      "get": {
        "operationId": "UsersController_listUsers",
        "summary": "List users with search and sort options",
        "parameters": [
          {
            "name": "sortOrder",
            "required": false,
            "in": "query",
            "description": "Sort order",
            "schema": {
              "enum": [
                "ASC",
                "DESC"
              ],
              "type": "string"
            }
          },
          {
            "name": "sortBy",
            "required": false,
            "in": "query",
            "description": "Sort by field (firstName, lastName, email, createdAt, updatedAt)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "search",
            "required": false,
            "in": "query",
            "description": "Search in firstName, lastName, and email fields",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "role",
            "required": false,
            "in": "query",
            "description": "Filter by role",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "isConfirmed",
            "required": false,
            "in": "query",
            "description": "Filter by confirmation status",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "lastName",
            "required": false,
            "in": "query",
            "description": "Filter by last name",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "firstName",
            "required": false,
            "in": "query",
            "description": "Filter by first name",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "email",
            "required": false,
            "in": "query",
            "description": "Filter by email",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns users list"
          }
        },
        "tags": [
          "users"
        ]
      }
    },
    "/users/send-confirmation-email": {
      "post": {
        "operationId": "UsersController_sendConfirmationEmail",
        "summary": "Send email confirmation link",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Confirmation email sent successfully"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "tags": [
          "users"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/users/confirm-email": {
      "post": {
        "operationId": "UsersController_confirmEmail",
        "summary": "Confirm user email address",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConfirmEmailDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Email confirmed successfully"
          },
          "400": {
            "description": "Invalid or expired confirmation token"
          }
        },
        "tags": [
          "users"
        ]
      }
    },
    "/users/profile-picture": {
      "post": {
        "operationId": "UsersController_updateProfilePicture",
        "summary": "Update user profile picture",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Profile picture updated successfully"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "tags": [
          "users"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "delete": {
        "operationId": "UsersController_deleteProfilePicture",
        "summary": "Delete user profile picture",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Profile picture deleted successfully"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "tags": [
          "users"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/stores": {
      "get": {
        "operationId": "StoreController_findAll",
        "summary": "List stores with search and sort options",
        "parameters": [
          {
            "name": "sortOrder",
            "required": false,
            "in": "query",
            "description": "Sort order",
            "schema": {
              "enum": [
                "ASC",
                "DESC"
              ],
              "type": "string"
            }
          },
          {
            "name": "sortBy",
            "required": false,
            "in": "query",
            "description": "Sort by field (name, address, createdAt, updatedAt)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "search",
            "required": false,
            "in": "query",
            "description": "Search in name and address fields",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "address",
            "required": false,
            "in": "query",
            "description": "Filter by store address",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "required": false,
            "in": "query",
            "description": "Filter by store name",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "stores"
        ]
      },
      "post": {
        "operationId": "StoreController_create",
        "summary": "Create store (admin)",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateStoreDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": [
          "stores"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/stores/{id}": {
      "get": {
        "operationId": "StoreController_findOne",
        "summary": "Get store by id",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "stores"
        ]
      },
      "put": {
        "operationId": "StoreController_update",
        "summary": "Update store (admin)",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateStoreDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "stores"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "delete": {
        "operationId": "StoreController_remove",
        "summary": "Delete store (admin)",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "stores"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/planograms": {
      "get": {
        "operationId": "PlanogramController_findAll",
        "summary": "List planograms with search and sort options",
        "parameters": [
          {
            "name": "sortOrder",
            "required": false,
            "in": "query",
            "description": "Sort order",
            "schema": {
              "enum": [
                "ASC",
                "DESC"
              ],
              "type": "string"
            }
          },
          {
            "name": "sortBy",
            "required": false,
            "in": "query",
            "description": "Sort by field (name, description, createdAt, updatedAt)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "search",
            "required": false,
            "in": "query",
            "description": "Search in name and description fields",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "storeId",
            "required": false,
            "in": "query",
            "description": "Filter by store ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "required": false,
            "in": "query",
            "description": "Filter by planogram name",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "planograms"
        ]
      },
      "post": {
        "operationId": "PlanogramController_create",
        "summary": "Create planogram (admin)",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePlanogramDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": [
          "planograms"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/planograms/{id}": {
      "get": {
        "operationId": "PlanogramController_findOne",
        "summary": "Get planogram by id",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "planograms"
        ]
      },
      "put": {
        "operationId": "PlanogramController_update",
        "summary": "Update planogram (admin)",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePlanogramDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "planograms"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "delete": {
        "operationId": "PlanogramController_remove",
        "summary": "Delete planogram (admin)",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "planograms"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/submissions": {
      "get": {
        "operationId": "SubmissionsController_findAll",
        "summary": "List submissions with search and sort options (admin only)",
        "parameters": [
          {
            "name": "sortOrder",
            "required": false,
            "in": "query",
            "description": "Sort order",
            "schema": {
              "enum": [
                "ASC",
                "DESC"
              ],
              "type": "string"
            }
          },
          {
            "name": "sortBy",
            "required": false,
            "in": "query",
            "description": "Sort by field (uploadedAt, createdAt, updatedAt)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "search",
            "required": false,
            "in": "query",
            "description": "Search in submission fields",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "uploadedById",
            "required": false,
            "in": "query",
            "description": "Filter by uploaded by user ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "planogramId",
            "required": false,
            "in": "query",
            "description": "Filter by planogram ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "storeId",
            "required": false,
            "in": "query",
            "description": "Filter by store ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "submissions"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "post": {
        "operationId": "SubmissionsController_createWithFileUpload",
        "summary": "Create submission with file upload",
        "parameters": [],
        "requestBody": {
          "required": true,
          "description": "Create submission with file upload",
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "storeId": {
                    "type": "string",
                    "format": "uuid"
                  },
                  "planogramId": {
                    "type": "string",
                    "format": "uuid"
                  },
                  "file": {
                    "type": "string",
                    "format": "binary"
                  }
                },
                "required": [
                  "storeId",
                  "planogramId",
                  "file"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": [
          "submissions"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/submissions/{id}": {
      "get": {
        "operationId": "SubmissionsController_findOne",
        "summary": "Get submission by id (admin only)",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "submissions"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "put": {
        "operationId": "SubmissionsController_update",
        "summary": "Update submission (admin only)",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateSubmissionDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "submissions"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "delete": {
        "operationId": "SubmissionsController_remove",
        "summary": "Delete submission (admin only)",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "submissions"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/submissions/{id}/uploads": {
      "post": {
        "operationId": "SubmissionsController_addUploadToSubmission",
        "summary": "Add upload to existing submission",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "Add file upload to submission",
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary"
                  }
                },
                "required": [
                  "file"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": [
          "submissions"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    }
  },
  "info": {
    "title": "merz API",
    "description": "The merz API documentation",
    "version": "1.0",
    "contact": {}
  },
  "tags": [
    {
      "name": "auth",
      "description": ""
    },
    {
      "name": "users",
      "description": ""
    }
  ],
  "servers": [],
  "components": {
    "securitySchemes": {
      "bearer": {
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "type": "http"
      }
    },
    "schemas": {
      "RegisterDto": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "example": "user@example.com"
          },
          "password": {
            "type": "string",
            "example": "password123"
          },
          "firstName": {
            "type": "string",
            "example": "John"
          },
          "lastName": {
            "type": "string",
            "example": "Doe"
          }
        },
        "required": [
          "email",
          "password"
        ]
      },
      "LoginDto": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "example": "user@example.com"
          },
          "password": {
            "type": "string",
            "example": "password123"
          }
        },
        "required": [
          "email",
          "password"
        ]
      },
      "ChangePasswordDto": {
        "type": "object",
        "properties": {
          "oldPassword": {
            "type": "string",
            "description": "Current password (required for non-Google users)"
          },
          "newPassword": {
            "type": "string",
            "description": "New password"
          }
        },
        "required": [
          "newPassword"
        ]
      },
      "ForgotPasswordDto": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "Email address of the user requesting password reset",
            "example": "user@example.com"
          }
        },
        "required": [
          "email"
        ]
      },
      "ResetPasswordDto": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string",
            "description": "Token received in the password reset email",
            "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
          },
          "newPassword": {
            "type": "string",
            "description": "New password for the user",
            "example": "newSecurePassword123"
          }
        },
        "required": [
          "token",
          "newPassword"
        ]
      },
      "UpdateProfileDto": {
        "type": "object",
        "properties": {
          "firstName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "profilePicture": {
            "type": "string"
          },
          "lang": {
            "type": "string"
          },
          "theme": {
            "type": "string"
          }
        }
      },
      "ConfirmEmailDto": {
        "type": "object",
        "properties": {}
      },
      "CreateStoreDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Store name"
          },
          "address": {
            "type": "string",
            "description": "Address"
          },
          "imageSrc": {
            "type": "string",
            "description": "Image URL (S3 or public URL)"
          },
          "createdById": {
            "type": "string",
            "description": "Creator user id (UUID)"
          },
          "updatedById": {
            "type": "string",
            "description": "Updater user id (UUID)"
          }
        },
        "required": [
          "name"
        ]
      },
      "UpdateStoreDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Store name"
          },
          "address": {
            "type": "string",
            "description": "Address"
          },
          "imageSrc": {
            "type": "string",
            "description": "Image URL (S3 or public URL)"
          },
          "createdById": {
            "type": "string",
            "description": "Creator user id (UUID)"
          },
          "updatedById": {
            "type": "string",
            "description": "Updater user id (UUID)"
          }
        }
      },
      "CreatePlanogramDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Planogram name"
          },
          "description": {
            "type": "string",
            "description": "Description"
          },
          "imageSrc": {
            "type": "string",
            "description": "Image URL (S3 or public URL)"
          },
          "storeId": {
            "type": "string",
            "description": "Store id (UUID)"
          },
          "createdById": {
            "type": "string",
            "description": "Creator user id (UUID)"
          },
          "updatedById": {
            "type": "string",
            "description": "Updater user id (UUID)"
          }
        },
        "required": [
          "name",
          "description",
          "storeId"
        ]
      },
      "UpdatePlanogramDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Planogram name"
          },
          "description": {
            "type": "string",
            "description": "Description"
          },
          "imageSrc": {
            "type": "string",
            "description": "Image URL (S3 or public URL)"
          },
          "storeId": {
            "type": "string",
            "description": "Store id (UUID)"
          },
          "createdById": {
            "type": "string",
            "description": "Creator user id (UUID)"
          },
          "updatedById": {
            "type": "string",
            "description": "Updater user id (UUID)"
          }
        }
      },
      "UpdateSubmissionDto": {
        "type": "object",
        "properties": {
          "storeId": {
            "type": "string",
            "description": "Store ID (UUID)"
          },
          "planogramId": {
            "type": "string",
            "description": "Planogram ID (UUID)"
          },
          "uploadIds": {
            "description": "Array of upload IDs to associate with submission",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      }
    }
  }
}